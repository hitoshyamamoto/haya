f0b2271c07aa1f428a94566ba467faa5
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const templates_js_1 = require("../../core/templates.js");
(0, globals_1.describe)('DatabaseTemplates', () => {
    (0, globals_1.it)('should have getTemplate method', () => {
        (0, globals_1.expect)(typeof templates_js_1.DatabaseTemplates.getTemplate).toBe('function');
    });
    (0, globals_1.it)('should have getAllTemplates method', () => {
        (0, globals_1.expect)(typeof templates_js_1.DatabaseTemplates.getAllTemplates).toBe('function');
    });
    (0, globals_1.it)('should return all templates', () => {
        const templates = templates_js_1.DatabaseTemplates.getAllTemplates();
        (0, globals_1.expect)(templates instanceof Map).toBe(true);
        (0, globals_1.expect)(templates.size).toBeGreaterThan(0);
    });
    (0, globals_1.it)('should return PostgreSQL template', () => {
        const template = templates_js_1.DatabaseTemplates.getTemplate('postgresql');
        (0, globals_1.expect)(template).toBeDefined();
        (0, globals_1.expect)(template?.name).toBe('PostgreSQL');
        (0, globals_1.expect)(template?.engine.name).toBe('postgresql');
    });
    (0, globals_1.it)('should return MySQL template', () => {
        const template = templates_js_1.DatabaseTemplates.getTemplate('mariadb');
        (0, globals_1.expect)(template).toBeDefined();
        (0, globals_1.expect)(template?.name).toBe('MariaDB');
        (0, globals_1.expect)(template?.engine.name).toBe('mariadb');
    });
    (0, globals_1.it)('should return undefined for non-existent template', () => {
        const template = templates_js_1.DatabaseTemplates.getTemplate('nonexistent');
        (0, globals_1.expect)(template).toBeUndefined();
    });
    (0, globals_1.it)('should have all required template properties', () => {
        const template = templates_js_1.DatabaseTemplates.getTemplate('postgresql');
        (0, globals_1.expect)(template).toBeDefined();
        (0, globals_1.expect)(template?.name).toBeDefined();
        (0, globals_1.expect)(template?.engine).toBeDefined();
        (0, globals_1.expect)(template?.engine.name).toBeDefined();
        (0, globals_1.expect)(template?.engine.type).toBeDefined();
        (0, globals_1.expect)(template?.engine.image).toBeDefined();
        (0, globals_1.expect)(template?.engine.ports).toBeDefined();
        (0, globals_1.expect)(template?.engine.environment).toBeDefined();
        (0, globals_1.expect)(template?.engine.volumes).toBeDefined();
        (0, globals_1.expect)(template?.engine.healthcheck).toBeDefined();
    });
    (0, globals_1.it)('should include time series databases', () => {
        const influxTemplate = templates_js_1.DatabaseTemplates.getTemplate('influxdb');
        const timescaleTemplate = templates_js_1.DatabaseTemplates.getTemplate('timescaledb');
        (0, globals_1.expect)(influxTemplate).toBeDefined();
        (0, globals_1.expect)(influxTemplate?.engine.type).toBe('timeseries');
        (0, globals_1.expect)(timescaleTemplate).toBeDefined();
        (0, globals_1.expect)(timescaleTemplate?.engine.type).toBe('timeseries');
    });
    (0, globals_1.it)('should have correct database types', () => {
        const availableTypes = templates_js_1.DatabaseTemplates.getAvailableTypes();
        (0, globals_1.expect)(availableTypes).toContain('sql');
        (0, globals_1.expect)(availableTypes).toContain('keyvalue');
        (0, globals_1.expect)(availableTypes).toContain('vector');
        (0, globals_1.expect)(availableTypes).toContain('timeseries');
    });
    (0, globals_1.it)('should return engines by type', () => {
        const sqlEngines = templates_js_1.DatabaseTemplates.getEnginesByType('sql');
        (0, globals_1.expect)(sqlEngines).toContain('postgresql');
        (0, globals_1.expect)(sqlEngines).toContain('mariadb');
        const timeseriesEngines = templates_js_1.DatabaseTemplates.getEnginesByType('timeseries');
        (0, globals_1.expect)(timeseriesEngines).toContain('influxdb');
        (0, globals_1.expect)(timeseriesEngines).toContain('timescaledb');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,