{"file":"/home/hitoshi/Documents/github/hitoshyamamoto/haya/src/tests/unit/templates.test.ts","mappings":"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","names":[],"sources":["/home/hitoshi/Documents/github/hitoshyamamoto/haya/src/tests/unit/templates.test.ts"],"sourcesContent":["import { describe, it, expect } from '@jest/globals';\r\nimport { DatabaseTemplates } from '../../core/templates.js';\r\n\r\ndescribe('DatabaseTemplates', () => {\r\n  it('should have getTemplate method', () => {\r\n    expect(typeof DatabaseTemplates.getTemplate).toBe('function');\r\n  });\r\n\r\n  it('should have getAllTemplates method', () => {\r\n    expect(typeof DatabaseTemplates.getAllTemplates).toBe('function');\r\n  });\r\n\r\n  it('should return all templates', () => {\r\n    const templates = DatabaseTemplates.getAllTemplates();\r\n    expect(templates instanceof Map).toBe(true);\r\n    expect(templates.size).toBeGreaterThan(0);\r\n  });\r\n\r\n  it('should return PostgreSQL template', () => {\r\n    const template = DatabaseTemplates.getTemplate('postgresql');\r\n    expect(template).toBeDefined();\r\n    expect(template?.name).toBe('PostgreSQL');\r\n    expect(template?.engine.name).toBe('postgresql');\r\n  });\r\n\r\n  it('should return MySQL template', () => {\r\n    const template = DatabaseTemplates.getTemplate('mariadb');\r\n    expect(template).toBeDefined();\r\n    expect(template?.name).toBe('MariaDB');\r\n    expect(template?.engine.name).toBe('mariadb');\r\n  });\r\n\r\n  it('should return undefined for non-existent template', () => {\r\n    const template = DatabaseTemplates.getTemplate('nonexistent');\r\n    expect(template).toBeUndefined();\r\n  });\r\n\r\n  it('should have all required template properties', () => {\r\n    const template = DatabaseTemplates.getTemplate('postgresql');\r\n    expect(template).toBeDefined();\r\n    expect(template?.name).toBeDefined();\r\n    expect(template?.engine).toBeDefined();\r\n    expect(template?.engine.name).toBeDefined();\r\n    expect(template?.engine.type).toBeDefined();\r\n    expect(template?.engine.image).toBeDefined();\r\n    expect(template?.engine.ports).toBeDefined();\r\n    expect(template?.engine.environment).toBeDefined();\r\n    expect(template?.engine.volumes).toBeDefined();\r\n    expect(template?.engine.healthcheck).toBeDefined();\r\n  });\r\n\r\n  it('should include time series databases', () => {\r\n    const influxTemplate = DatabaseTemplates.getTemplate('influxdb');\r\n    const timescaleTemplate = DatabaseTemplates.getTemplate('timescaledb');\r\n    \r\n    expect(influxTemplate).toBeDefined();\r\n    expect(influxTemplate?.engine.type).toBe('timeseries');\r\n    \r\n    expect(timescaleTemplate).toBeDefined();\r\n    expect(timescaleTemplate?.engine.type).toBe('timeseries');\r\n  });\r\n\r\n  it('should have correct database types', () => {\r\n    const availableTypes = DatabaseTemplates.getAvailableTypes();\r\n    expect(availableTypes).toContain('sql');\r\n    expect(availableTypes).toContain('keyvalue');\r\n    expect(availableTypes).toContain('vector');\r\n    expect(availableTypes).toContain('timeseries');\r\n  });\r\n\r\n  it('should return engines by type', () => {\r\n    const sqlEngines = DatabaseTemplates.getEnginesByType('sql');\r\n    expect(sqlEngines).toContain('postgresql');\r\n    expect(sqlEngines).toContain('mariadb');\r\n    \r\n    const timeseriesEngines = DatabaseTemplates.getEnginesByType('timeseries');\r\n    expect(timeseriesEngines).toContain('influxdb');\r\n    expect(timeseriesEngines).toContain('timescaledb');\r\n  });\r\n}); "],"version":3}