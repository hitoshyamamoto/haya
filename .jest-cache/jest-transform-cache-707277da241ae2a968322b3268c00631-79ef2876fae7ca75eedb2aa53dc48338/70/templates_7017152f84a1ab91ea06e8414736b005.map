{"file":"/home/hitoshi/Documents/github/hitoshyamamoto/haya/src/core/templates.ts","mappings":"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","names":[],"sources":["/home/hitoshi/Documents/github/hitoshyamamoto/haya/src/core/templates.ts"],"sourcesContent":["import { DatabaseEngine, DatabaseTemplate } from './types.js';\r\n\r\nexport class DatabaseTemplates {\r\n  private static templates: Map<string, DatabaseTemplate> = new Map();\r\n\r\n  static {\r\n    // ✅ SQL Databases (100% Open-Source)\r\n    this.addTemplate('postgresql', {\r\n      name: 'PostgreSQL',\r\n      engine: {\r\n        name: 'postgresql',\r\n        type: 'sql',\r\n        version: '16',\r\n        image: 'postgres:16-alpine',\r\n        ports: [5432],\r\n        volumes: ['/var/lib/postgresql/data'],\r\n        environment: {\r\n          POSTGRES_DB: 'database',\r\n          POSTGRES_USER: 'admin',\r\n          POSTGRES_PASSWORD: 'password',\r\n        },\r\n        healthcheck: {\r\n          test: 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}',\r\n          interval: '10s',\r\n          timeout: '5s',\r\n          retries: 5,\r\n        },\r\n      },\r\n      admin_dashboard: {\r\n        enabled: true,\r\n        port: 8080,\r\n        image: 'adminer:4.8.1',\r\n      },\r\n      client_sdk: {\r\n        enabled: true,\r\n        languages: ['typescript', 'python', 'javascript'],\r\n      },\r\n    });\r\n\r\n    this.addTemplate('mariadb', {\r\n      name: 'MariaDB',\r\n      engine: {\r\n        name: 'mariadb',\r\n        type: 'sql',\r\n        version: '11',\r\n        image: 'mariadb:11',\r\n        ports: [3306],\r\n        volumes: ['/var/lib/mysql'],\r\n        environment: {\r\n          MYSQL_ROOT_PASSWORD: 'rootpassword',\r\n          MYSQL_DATABASE: 'database',\r\n          MYSQL_USER: 'admin',\r\n          MYSQL_PASSWORD: 'password',\r\n        },\r\n        healthcheck: {\r\n          test: 'healthcheck.sh --connect --innodb_initialized',\r\n          interval: '10s',\r\n          timeout: '5s',\r\n          retries: 5,\r\n        },\r\n      },\r\n      admin_dashboard: {\r\n        enabled: true,\r\n        port: 8080,\r\n        image: 'adminer:4.8.1',\r\n      },\r\n    });\r\n\r\n    this.addTemplate('sqlite', {\r\n      name: 'SQLite',\r\n      engine: {\r\n        name: 'sqlite',\r\n        type: 'embedded',\r\n        version: '3',\r\n        image: 'alpine:latest',\r\n        ports: [],\r\n        volumes: ['/data'],\r\n        environment: {},\r\n      },\r\n    });\r\n\r\n    this.addTemplate('duckdb', {\r\n      name: 'DuckDB',\r\n      engine: {\r\n        name: 'duckdb',\r\n        type: 'embedded',\r\n        version: '1.0',\r\n        image: 'alpine:latest',\r\n        ports: [],\r\n        volumes: ['/data'],\r\n        environment: {},\r\n      },\r\n    });\r\n\r\n    // ✅ Key-Value Databases (100% Open-Source)\r\n    this.addTemplate('redis', {\r\n      name: 'Redis',\r\n      engine: {\r\n        name: 'redis',\r\n        type: 'keyvalue',\r\n        version: '7.0',\r\n        image: 'redis:7.0-alpine',\r\n        ports: [6379],\r\n        volumes: ['/data'],\r\n        environment: {\r\n          REDIS_PASSWORD: 'password',\r\n        },\r\n        healthcheck: {\r\n          test: 'redis-cli ping',\r\n          interval: '10s',\r\n          timeout: '3s',\r\n          retries: 5,\r\n        },\r\n      },\r\n      admin_dashboard: {\r\n        enabled: true,\r\n        port: 8081,\r\n        image: 'rediscommander/redis-commander:latest',\r\n      },\r\n    });\r\n\r\n    // ✅ Wide Column Databases (100% Open-Source)\r\n    this.addTemplate('cassandra', {\r\n      name: 'Apache Cassandra',\r\n      engine: {\r\n        name: 'cassandra',\r\n        type: 'widecolumn',\r\n        version: '4.1',\r\n        image: 'cassandra:4.1',\r\n        ports: [9042, 7000],\r\n        volumes: ['/var/lib/cassandra'],\r\n        environment: {\r\n          CASSANDRA_CLUSTER_NAME: 'HayaiCluster',\r\n          CASSANDRA_DC: 'dc1',\r\n          CASSANDRA_RACK: 'rack1',\r\n        },\r\n        healthcheck: {\r\n          test: 'nodetool status',\r\n          interval: '30s',\r\n          timeout: '10s',\r\n          retries: 5,\r\n        },\r\n      },\r\n    });\r\n\r\n    // ✅ Vector Databases (100% Open-Source)\r\n    this.addTemplate('qdrant', {\r\n      name: 'Qdrant',\r\n      engine: {\r\n        name: 'qdrant',\r\n        type: 'vector',\r\n        version: '1.7',\r\n        image: 'qdrant/qdrant:v1.7.0',\r\n        ports: [6333, 6334],\r\n        volumes: ['/qdrant/storage'],\r\n        environment: {\r\n          QDRANT__SERVICE__HTTP_PORT: '6333',\r\n          QDRANT__SERVICE__GRPC_PORT: '6334',\r\n        },\r\n        healthcheck: {\r\n          test: 'wget --no-verbose --tries=1 --spider http://localhost:6333/health || exit 1',\r\n          interval: '10s',\r\n          timeout: '5s',\r\n          retries: 5,\r\n        },\r\n      },\r\n      admin_dashboard: {\r\n        enabled: true,\r\n        port: 6333,\r\n        image: 'qdrant/qdrant:v1.7.0',\r\n      },\r\n    });\r\n\r\n    this.addTemplate('weaviate', {\r\n      name: 'Weaviate',\r\n      engine: {\r\n        name: 'weaviate',\r\n        type: 'vector',\r\n        version: '1.23',\r\n        image: 'semitechnologies/weaviate:1.23.0',\r\n        ports: [8080],\r\n        volumes: ['/var/lib/weaviate'],\r\n        environment: {\r\n          QUERY_DEFAULTS_LIMIT: '25',\r\n          AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true',\r\n          PERSISTENCE_DATA_PATH: '/var/lib/weaviate',\r\n          DEFAULT_VECTORIZER_MODULE: 'none',\r\n          ENABLE_MODULES: 'text2vec-openai,text2vec-cohere,text2vec-huggingface',\r\n        },\r\n        healthcheck: {\r\n          test: 'wget --no-verbose --tries=1 --spider http://localhost:8080/v1/.well-known/ready || exit 1',\r\n          interval: '10s',\r\n          timeout: '5s',\r\n          retries: 5,\r\n        },\r\n      },\r\n    });\r\n\r\n    this.addTemplate('milvus', {\r\n      name: 'Milvus',\r\n      engine: {\r\n        name: 'milvus',\r\n        type: 'vector',\r\n        version: '2.3',\r\n        image: 'milvusdb/milvus:v2.3.0',\r\n        ports: [19530, 9091],\r\n        volumes: ['/var/lib/milvus'],\r\n        environment: {\r\n          ETCD_USE_EMBED: 'true',\r\n          ETCD_DATA_DIR: '/var/lib/milvus/etcd',\r\n          COMMON_STORAGETYPE: 'local',\r\n        },\r\n        healthcheck: {\r\n          test: 'curl -f http://localhost:9091/healthz || exit 1',\r\n          interval: '30s',\r\n          timeout: '10s',\r\n          retries: 5,\r\n        },\r\n      },\r\n    });\r\n\r\n    // ✅ Graph Databases (100% Open-Source)\r\n    this.addTemplate('arangodb', {\r\n      name: 'ArangoDB',\r\n      engine: {\r\n        name: 'arangodb',\r\n        type: 'graph',\r\n        version: '3.11',\r\n        image: 'arangodb:3.11',\r\n        ports: [8529],\r\n        volumes: ['/var/lib/arangodb3'],\r\n        environment: {\r\n          ARANGO_ROOT_PASSWORD: 'password',\r\n        },\r\n        healthcheck: {\r\n          test: 'curl -f http://localhost:8529/_api/version || exit 1',\r\n          interval: '10s',\r\n          timeout: '5s',\r\n          retries: 5,\r\n        },\r\n      },\r\n      admin_dashboard: {\r\n        enabled: true,\r\n        port: 8529,\r\n        image: 'arangodb:3.11',\r\n      },\r\n    });\r\n\r\n    // ✅ Search Databases (100% Open-Source)\r\n    this.addTemplate('meilisearch', {\r\n      name: 'Meilisearch',\r\n      engine: {\r\n        name: 'meilisearch',\r\n        type: 'search',\r\n        version: '1.5',\r\n        image: 'getmeili/meilisearch:v1.5',\r\n        ports: [7700],\r\n        volumes: ['/meili_data'],\r\n        environment: {\r\n          MEILI_MASTER_KEY: 'masterkey',\r\n          MEILI_ENV: 'development',\r\n        },\r\n        healthcheck: {\r\n          test: 'wget --no-verbose --tries=1 --spider http://localhost:7700/health || exit 1',\r\n          interval: '10s',\r\n          timeout: '5s',\r\n          retries: 5,\r\n        },\r\n      },\r\n      admin_dashboard: {\r\n        enabled: true,\r\n        port: 7700,\r\n        image: 'getmeili/meilisearch:v1.5',\r\n      },\r\n    });\r\n\r\n    this.addTemplate('typesense', {\r\n      name: 'Typesense',\r\n      engine: {\r\n        name: 'typesense',\r\n        type: 'search',\r\n        version: '0.25',\r\n        image: 'typesense/typesense:0.25.0',\r\n        ports: [8108],\r\n        volumes: ['/data'],\r\n        environment: {\r\n          TYPESENSE_API_KEY: 'xyz',\r\n          TYPESENSE_DATA_DIR: '/data',\r\n        },\r\n        healthcheck: {\r\n          test: 'curl -f http://localhost:8108/health || exit 1',\r\n          interval: '10s',\r\n          timeout: '5s',\r\n          retries: 5,\r\n        },\r\n      },\r\n    });\r\n\r\n    // ✅ Embedded Databases\r\n    this.addTemplate('leveldb', {\r\n      name: 'LevelDB',\r\n      engine: {\r\n        name: 'leveldb',\r\n        type: 'embedded',\r\n        version: '1.0',\r\n        image: 'alpine:latest',\r\n        ports: [],\r\n        volumes: ['/data'],\r\n        environment: {},\r\n      },\r\n    });\r\n\r\n    // ✅ Time Series Databases (100% Open-Source)\r\n    this.addTemplate('influxdb', {\r\n      name: 'InfluxDB 3 Core',\r\n      engine: {\r\n        name: 'influxdb',\r\n        type: 'timeseries',\r\n        version: '3.0',\r\n        image: 'influxdb:latest',\r\n        ports: [8086, 8181],\r\n        volumes: ['/var/lib/influxdb3'],\r\n        environment: {\r\n          INFLUXDB_DB: 'hayai_db',\r\n          INFLUXDB_ADMIN_USER: 'admin',\r\n          INFLUXDB_ADMIN_PASSWORD: 'password',\r\n        },\r\n        healthcheck: {\r\n          test: 'curl -f http://localhost:8086/health || exit 1',\r\n          interval: '10s',\r\n          timeout: '5s',\r\n          retries: 5,\r\n        },\r\n      },\r\n      admin_dashboard: {\r\n        enabled: true,\r\n        port: 8086,\r\n        image: 'influxdb:latest',\r\n      },\r\n      client_sdk: {\r\n        enabled: true,\r\n        languages: ['typescript', 'python', 'javascript', 'go'],\r\n      },\r\n    });\r\n\r\n    this.addTemplate('timescaledb', {\r\n      name: 'TimescaleDB',\r\n      engine: {\r\n        name: 'timescaledb',\r\n        type: 'timeseries',\r\n        version: '2.17',\r\n        image: 'timescale/timescaledb:latest-pg16',\r\n        ports: [5432],\r\n        volumes: ['/var/lib/postgresql/data'],\r\n        environment: {\r\n          POSTGRES_DB: 'hayai_db',\r\n          POSTGRES_USER: 'admin',\r\n          POSTGRES_PASSWORD: 'password',\r\n        },\r\n        healthcheck: {\r\n          test: 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}',\r\n          interval: '10s',\r\n          timeout: '5s',\r\n          retries: 5,\r\n        },\r\n      },\r\n      admin_dashboard: {\r\n        enabled: true,\r\n        port: 8080,\r\n        image: 'adminer:4.8.1',\r\n      },\r\n      client_sdk: {\r\n        enabled: true,\r\n        languages: ['typescript', 'python', 'javascript', 'go', 'rust'],\r\n      },\r\n    });\r\n\r\n    this.addTemplate('questdb', {\r\n      name: 'QuestDB',\r\n      engine: {\r\n        name: 'questdb',\r\n        type: 'timeseries',\r\n        version: '8.3',\r\n        image: 'questdb/questdb:latest',\r\n        ports: [9000, 8812, 9009],\r\n        volumes: ['/var/lib/questdb'],\r\n        environment: {\r\n          QUESTDB_DATABASE: 'hayai_db',\r\n          QUESTDB_USER: 'admin',\r\n          QUESTDB_PASSWORD: 'password',\r\n        },\r\n        healthcheck: {\r\n          test: 'curl -f http://localhost:9000/status || exit 1',\r\n          interval: '10s',\r\n          timeout: '5s',\r\n          retries: 5,\r\n        },\r\n      },\r\n      admin_dashboard: {\r\n        enabled: true,\r\n        port: 9000,\r\n        image: 'questdb/questdb:latest',\r\n      },\r\n      client_sdk: {\r\n        enabled: true,\r\n        languages: ['typescript', 'python', 'javascript', 'java', 'go'],\r\n      },\r\n    });\r\n\r\n    this.addTemplate('victoriametrics', {\r\n      name: 'VictoriaMetrics',\r\n      engine: {\r\n        name: 'victoriametrics',\r\n        type: 'timeseries',\r\n        version: '1.107',\r\n        image: 'victoriametrics/victoria-metrics:latest',\r\n        ports: [8428],\r\n        volumes: ['/victoria-metrics-data'],\r\n        environment: {\r\n          VM_RETENTION_PERIOD: '12',\r\n          VM_STORAGE_DATA_PATH: '/victoria-metrics-data',\r\n        },\r\n        healthcheck: {\r\n          test: 'wget --no-verbose --tries=1 --spider http://localhost:8428/health || exit 1',\r\n          interval: '10s',\r\n          timeout: '5s',\r\n          retries: 5,\r\n        },\r\n      },\r\n      admin_dashboard: {\r\n        enabled: true,\r\n        port: 8428,\r\n        image: 'victoriametrics/victoria-metrics:latest',\r\n      },\r\n    });\r\n\r\n    this.addTemplate('horaedb', {\r\n      name: 'Apache HoraeDB',\r\n      engine: {\r\n        name: 'horaedb',\r\n        type: 'timeseries',\r\n        version: '2.1',\r\n        image: 'apache/horaedb:latest',\r\n        ports: [8831, 3307],\r\n        volumes: ['/opt/horaedb'],\r\n        environment: {\r\n          HORAEDB_DATA_DIR: '/opt/horaedb/data',\r\n        },\r\n        healthcheck: {\r\n          test: 'curl -f http://localhost:8831/health || exit 1',\r\n          interval: '30s',\r\n          timeout: '10s',\r\n          retries: 5,\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  private static addTemplate(key: string, template: DatabaseTemplate): void {\r\n    this.templates.set(key, template);\r\n  }\r\n\r\n  public static getTemplate(engine: string): DatabaseTemplate | undefined {\r\n    return this.templates.get(engine.toLowerCase());\r\n  }\r\n\r\n  public static getAllTemplates(): Map<string, DatabaseTemplate> {\r\n    return new Map(this.templates);\r\n  }\r\n\r\n  public static getTemplatesByType(type: string): Map<string, DatabaseTemplate> {\r\n    const filtered = new Map<string, DatabaseTemplate>();\r\n    for (const [key, template] of this.templates) {\r\n      if (template.engine.type === type) {\r\n        filtered.set(key, template);\r\n      }\r\n    }\r\n    return filtered;\r\n  }\r\n\r\n  public static getAvailableEngines(): string[] {\r\n    return Array.from(this.templates.keys());\r\n  }\r\n\r\n  public static getAvailableTypes(): string[] {\r\n    const types = new Set<string>();\r\n    for (const template of this.templates.values()) {\r\n      types.add(template.engine.type);\r\n    }\r\n    return Array.from(types);\r\n  }\r\n\r\n  public static isEngineSupported(engine: string): boolean {\r\n    return this.templates.has(engine.toLowerCase());\r\n  }\r\n\r\n  public static getEnginesByType(type: string): string[] {\r\n    const engines: string[] = [];\r\n    for (const [key, template] of this.templates) {\r\n      if (template.engine.type === type) {\r\n        engines.push(key);\r\n      }\r\n    }\r\n    return engines;\r\n  }\r\n\r\n  public static getOpenSourceInfo(): Record<string, { license: string; fullyOpenSource: boolean; notes: string }> {\r\n    return {\r\n      postgresql: {\r\n        license: 'PostgreSQL License (MIT-like)',\r\n        fullyOpenSource: true,\r\n        notes: 'Completely free and widely adopted'\r\n      },\r\n      mariadb: {\r\n        license: 'GPL v2',\r\n        fullyOpenSource: true,\r\n        notes: 'MySQL community fork with enhanced features'\r\n      },\r\n      sqlite: {\r\n        license: 'Public Domain',\r\n        fullyOpenSource: true,\r\n        notes: 'No license or attribution required'\r\n      },\r\n      duckdb: {\r\n        license: 'MIT',\r\n        fullyOpenSource: true,\r\n        notes: 'Optimized for local analytics'\r\n      },\r\n      redis: {\r\n        license: 'BSD 3-Clause',\r\n        fullyOpenSource: true,\r\n        notes: 'Completely open-source'\r\n      },\r\n      cassandra: {\r\n        license: 'Apache 2.0',\r\n        fullyOpenSource: true,\r\n        notes: 'Completely open-source'\r\n      },\r\n      qdrant: {\r\n        license: 'Apache 2.0',\r\n        fullyOpenSource: true,\r\n        notes: 'Fast with REST API and native embedding support'\r\n      },\r\n      weaviate: {\r\n        license: 'BSD 3-Clause',\r\n        fullyOpenSource: true,\r\n        notes: 'Requires Docker for local instance'\r\n      },\r\n      milvus: {\r\n        license: 'Apache 2.0',\r\n        fullyOpenSource: true,\r\n        notes: 'Built for AI and semantic search'\r\n      },\r\n      arangodb: {\r\n        license: 'Apache 2.0',\r\n        fullyOpenSource: true,\r\n        notes: 'Supports Graph + Document + Key-Value'\r\n      },\r\n      meilisearch: {\r\n        license: 'MIT',\r\n        fullyOpenSource: true,\r\n        notes: 'Lightweight and modern, great for TypeScript projects'\r\n      },\r\n      typesense: {\r\n        license: 'GPL v3',\r\n        fullyOpenSource: true,\r\n        notes: 'Modern alternative to Meilisearch'\r\n      },\r\n      leveldb: {\r\n        license: 'BSD',\r\n        fullyOpenSource: true,\r\n        notes: 'Low-level, used internally by many tools'\r\n      },\r\n      influxdb: {\r\n        license: 'MIT/Apache 2.0',\r\n        fullyOpenSource: true,\r\n        notes: 'InfluxDB 3 Core - Optimized for recent data (72h), with integrated Python'\r\n      },\r\n      timescaledb: {\r\n        license: 'Timescale License (TSL)',\r\n        fullyOpenSource: false,\r\n        notes: 'Source-available, allows internal use, only prohibits hosting as service'\r\n      },\r\n      questdb: {\r\n        license: 'Apache 2.0',\r\n        fullyOpenSource: true,\r\n        notes: 'Exceptional performance, native SQL, Parquet format'\r\n      },\r\n      victoriametrics: {\r\n        license: 'Apache 2.0',\r\n        fullyOpenSource: true,\r\n        notes: 'Prometheus alternative, optimized for metrics and monitoring'\r\n      },\r\n      horaedb: {\r\n        license: 'Apache 2.0',\r\n        fullyOpenSource: true,\r\n        notes: 'Apache HoraeDB - Distributed, cloud-native, in incubation'\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n// Convenience functions for global access\r\nexport const getTemplate = (engine: string): DatabaseTemplate | undefined => {\r\n  return DatabaseTemplates.getTemplate(engine);\r\n};\r\n\r\nexport const getAllTemplates = (): Map<string, DatabaseTemplate> => {\r\n  return DatabaseTemplates.getAllTemplates();\r\n};\r\n\r\nexport const getTemplatesByType = (type: string): Map<string, DatabaseTemplate> => {\r\n  return DatabaseTemplates.getTemplatesByType(type);\r\n};\r\n\r\nexport const getAvailableEngines = (): string[] => {\r\n  return DatabaseTemplates.getAvailableEngines();\r\n};\r\n\r\nexport const getAvailableTypes = (): string[] => {\r\n  return DatabaseTemplates.getAvailableTypes();\r\n};\r\n\r\nexport const isEngineSupported = (engine: string): boolean => {\r\n  return DatabaseTemplates.isEngineSupported(engine);\r\n};\r\n\r\nexport const getEnginesByType = (type: string): string[] => {\r\n  return DatabaseTemplates.getEnginesByType(type);\r\n};\r\n\r\nexport const getOpenSourceInfo = (): Record<string, { license: string; fullyOpenSource: boolean; notes: string }> => {\r\n  return DatabaseTemplates.getOpenSourceInfo();\r\n}; "],"version":3}