74e199ab0a9bc4ea7730b4d793e12574
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Global test setup
const globals_1 = require("@jest/globals");
// Set up test environment
process.env.NODE_ENV = 'test';
process.env.CI = 'true';
// Set test timeout globally
globals_1.jest.setTimeout(30000);
// Custom Jest matchers
expect.extend({
    toBeValidConnectionUri(received) {
        const validProtocols = [
            'postgresql://',
            'mysql://',
            'redis://',
            'sqlite:///',
            'duckdb:///',
            'http://',
            'https://',
        ];
        const isValid = validProtocols.some(protocol => received.startsWith(protocol));
        return {
            message: () => `expected ${received} to ${isValid ? 'not ' : ''}be a valid connection URI`,
            pass: isValid,
        };
    },
    toBeValidPort(received) {
        const isValid = Number.isInteger(received) && received >= 1024 && received <= 65535;
        return {
            message: () => `expected ${received} to ${isValid ? 'not ' : ''}be a valid port number (1024-65535)`,
            pass: isValid,
        };
    },
});
// Suppress console.log during tests unless DEBUG is set
if (!process.env.DEBUG) {
    const originalConsoleLog = console.log;
    const originalConsoleWarn = console.warn;
    const originalConsoleError = console.error;
    console.log = (...args) => {
        // Only show logs that contain 'test' or are errors
        if (args.some(arg => String(arg).includes('test')) || process.env.VERBOSE_TESTS) {
            originalConsoleLog(...args);
        }
    };
    console.warn = (...args) => {
        if (process.env.VERBOSE_TESTS) {
            originalConsoleWarn(...args);
        }
    };
    console.error = (...args) => {
        // Always show errors
        originalConsoleError(...args);
    };
}
// Global error handler for unhandled rejections
process.on('unhandledRejection', (reason, promise) => {
    console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});
// Set test environment variables
process.env.NODE_ENV = 'test';
process.env.LOG_LEVEL = 'error'; // Reduce logging during tests 
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvaGl0b3NoaS9Eb2N1bWVudHMvZ2l0aHViL2hpdG9zaHlhbWFtb3RvL2hheWEvc3JjL3Rlc3RzL3NldHVwLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsb0JBQW9CO0FBQ3BCLDJDQUFxQztBQUVyQywwQkFBMEI7QUFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDO0FBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLE1BQU0sQ0FBQztBQUV4Qiw0QkFBNEI7QUFDNUIsY0FBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQVl2Qix1QkFBdUI7QUFDdkIsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNaLHNCQUFzQixDQUFDLFFBQWdCO1FBQ3JDLE1BQU0sY0FBYyxHQUFHO1lBQ3JCLGVBQWU7WUFDZixVQUFVO1lBQ1YsVUFBVTtZQUNWLFlBQVk7WUFDWixZQUFZO1lBQ1osU0FBUztZQUNULFVBQVU7U0FDWCxDQUFDO1FBRUYsTUFBTSxPQUFPLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUUvRSxPQUFPO1lBQ0wsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUNaLFlBQVksUUFBUSxPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLDJCQUEyQjtZQUM3RSxJQUFJLEVBQUUsT0FBTztTQUNkLENBQUM7SUFDSixDQUFDO0lBRUQsYUFBYSxDQUFDLFFBQWdCO1FBQzVCLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksUUFBUSxJQUFJLElBQUksSUFBSSxRQUFRLElBQUksS0FBSyxDQUFDO1FBRXBGLE9BQU87WUFDTCxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQ1osWUFBWSxRQUFRLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUscUNBQXFDO1lBQ3ZGLElBQUksRUFBRSxPQUFPO1NBQ2QsQ0FBQztJQUNKLENBQUM7Q0FDRixDQUFDLENBQUM7QUFFSCx3REFBd0Q7QUFDeEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDdkIsTUFBTSxrQkFBa0IsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0lBQ3ZDLE1BQU0sbUJBQW1CLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztJQUN6QyxNQUFNLG9CQUFvQixHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7SUFFM0MsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsSUFBVyxFQUFFLEVBQUU7UUFDL0IsbURBQW1EO1FBQ25ELElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ2hGLGtCQUFrQixDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDOUIsQ0FBQztJQUNILENBQUMsQ0FBQztJQUVGLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLElBQVcsRUFBRSxFQUFFO1FBQ2hDLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUM5QixtQkFBbUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQy9CLENBQUM7SUFDSCxDQUFDLENBQUM7SUFFRixPQUFPLENBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxJQUFXLEVBQUUsRUFBRTtRQUNqQyxxQkFBcUI7UUFDckIsb0JBQW9CLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsZ0RBQWdEO0FBQ2hELE9BQU8sQ0FBQyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLEVBQUU7SUFDbkQsT0FBTyxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZFLENBQUMsQ0FBQyxDQUFDO0FBRUgsaUNBQWlDO0FBQ2pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQztBQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsQ0FBQywrQkFBK0IiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvaGl0b3NoaS9Eb2N1bWVudHMvZ2l0aHViL2hpdG9zaHlhbWFtb3RvL2hheWEvc3JjL3Rlc3RzL3NldHVwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdsb2JhbCB0ZXN0IHNldHVwXHJcbmltcG9ydCB7IGplc3QgfSBmcm9tICdAamVzdC9nbG9iYWxzJztcclxuXHJcbi8vIFNldCB1cCB0ZXN0IGVudmlyb25tZW50XHJcbnByb2Nlc3MuZW52Lk5PREVfRU5WID0gJ3Rlc3QnO1xyXG5wcm9jZXNzLmVudi5DSSA9ICd0cnVlJztcclxuXHJcbi8vIFNldCB0ZXN0IHRpbWVvdXQgZ2xvYmFsbHlcclxuamVzdC5zZXRUaW1lb3V0KDMwMDAwKTtcclxuXHJcbi8vIEdsb2JhbCB0ZXN0IHV0aWxpdGllc1xyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgbmFtZXNwYWNlIGplc3Qge1xyXG4gICAgaW50ZXJmYWNlIE1hdGNoZXJzPFI+IHtcclxuICAgICAgdG9CZVZhbGlkQ29ubmVjdGlvblVyaSgpOiBSO1xyXG4gICAgICB0b0JlVmFsaWRQb3J0KCk6IFI7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLyBDdXN0b20gSmVzdCBtYXRjaGVyc1xyXG5leHBlY3QuZXh0ZW5kKHtcclxuICB0b0JlVmFsaWRDb25uZWN0aW9uVXJpKHJlY2VpdmVkOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHZhbGlkUHJvdG9jb2xzID0gW1xyXG4gICAgICAncG9zdGdyZXNxbDovLycsXHJcbiAgICAgICdteXNxbDovLycsXHJcbiAgICAgICdyZWRpczovLycsXHJcbiAgICAgICdzcWxpdGU6Ly8vJyxcclxuICAgICAgJ2R1Y2tkYjovLy8nLFxyXG4gICAgICAnaHR0cDovLycsXHJcbiAgICAgICdodHRwczovLycsXHJcbiAgICBdO1xyXG4gICAgXHJcbiAgICBjb25zdCBpc1ZhbGlkID0gdmFsaWRQcm90b2NvbHMuc29tZShwcm90b2NvbCA9PiByZWNlaXZlZC5zdGFydHNXaXRoKHByb3RvY29sKSk7XHJcbiAgICBcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG1lc3NhZ2U6ICgpID0+IFxyXG4gICAgICAgIGBleHBlY3RlZCAke3JlY2VpdmVkfSB0byAke2lzVmFsaWQgPyAnbm90ICcgOiAnJ31iZSBhIHZhbGlkIGNvbm5lY3Rpb24gVVJJYCxcclxuICAgICAgcGFzczogaXNWYWxpZCxcclxuICAgIH07XHJcbiAgfSxcclxuICBcclxuICB0b0JlVmFsaWRQb3J0KHJlY2VpdmVkOiBudW1iZXIpIHtcclxuICAgIGNvbnN0IGlzVmFsaWQgPSBOdW1iZXIuaXNJbnRlZ2VyKHJlY2VpdmVkKSAmJiByZWNlaXZlZCA+PSAxMDI0ICYmIHJlY2VpdmVkIDw9IDY1NTM1O1xyXG4gICAgXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBtZXNzYWdlOiAoKSA9PiBcclxuICAgICAgICBgZXhwZWN0ZWQgJHtyZWNlaXZlZH0gdG8gJHtpc1ZhbGlkID8gJ25vdCAnIDogJyd9YmUgYSB2YWxpZCBwb3J0IG51bWJlciAoMTAyNC02NTUzNSlgLFxyXG4gICAgICBwYXNzOiBpc1ZhbGlkLFxyXG4gICAgfTtcclxuICB9LFxyXG59KTtcclxuXHJcbi8vIFN1cHByZXNzIGNvbnNvbGUubG9nIGR1cmluZyB0ZXN0cyB1bmxlc3MgREVCVUcgaXMgc2V0XHJcbmlmICghcHJvY2Vzcy5lbnYuREVCVUcpIHtcclxuICBjb25zdCBvcmlnaW5hbENvbnNvbGVMb2cgPSBjb25zb2xlLmxvZztcclxuICBjb25zdCBvcmlnaW5hbENvbnNvbGVXYXJuID0gY29uc29sZS53YXJuO1xyXG4gIGNvbnN0IG9yaWdpbmFsQ29uc29sZUVycm9yID0gY29uc29sZS5lcnJvcjtcclxuICBcclxuICBjb25zb2xlLmxvZyA9ICguLi5hcmdzOiBhbnlbXSkgPT4ge1xyXG4gICAgLy8gT25seSBzaG93IGxvZ3MgdGhhdCBjb250YWluICd0ZXN0JyBvciBhcmUgZXJyb3JzXHJcbiAgICBpZiAoYXJncy5zb21lKGFyZyA9PiBTdHJpbmcoYXJnKS5pbmNsdWRlcygndGVzdCcpKSB8fCBwcm9jZXNzLmVudi5WRVJCT1NFX1RFU1RTKSB7XHJcbiAgICAgIG9yaWdpbmFsQ29uc29sZUxvZyguLi5hcmdzKTtcclxuICAgIH1cclxuICB9O1xyXG4gIFxyXG4gIGNvbnNvbGUud2FybiA9ICguLi5hcmdzOiBhbnlbXSkgPT4ge1xyXG4gICAgaWYgKHByb2Nlc3MuZW52LlZFUkJPU0VfVEVTVFMpIHtcclxuICAgICAgb3JpZ2luYWxDb25zb2xlV2FybiguLi5hcmdzKTtcclxuICAgIH1cclxuICB9O1xyXG4gIFxyXG4gIGNvbnNvbGUuZXJyb3IgPSAoLi4uYXJnczogYW55W10pID0+IHtcclxuICAgIC8vIEFsd2F5cyBzaG93IGVycm9yc1xyXG4gICAgb3JpZ2luYWxDb25zb2xlRXJyb3IoLi4uYXJncyk7XHJcbiAgfTtcclxufVxyXG5cclxuLy8gR2xvYmFsIGVycm9yIGhhbmRsZXIgZm9yIHVuaGFuZGxlZCByZWplY3Rpb25zXHJcbnByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIChyZWFzb24sIHByb21pc2UpID0+IHtcclxuICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgUmVqZWN0aW9uIGF0OicsIHByb21pc2UsICdyZWFzb246JywgcmVhc29uKTtcclxufSk7XHJcblxyXG4vLyBTZXQgdGVzdCBlbnZpcm9ubWVudCB2YXJpYWJsZXNcclxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgPSAndGVzdCc7XHJcbnByb2Nlc3MuZW52LkxPR19MRVZFTCA9ICdlcnJvcic7IC8vIFJlZHVjZSBsb2dnaW5nIGR1cmluZyB0ZXN0cyAiXSwidmVyc2lvbiI6M30=