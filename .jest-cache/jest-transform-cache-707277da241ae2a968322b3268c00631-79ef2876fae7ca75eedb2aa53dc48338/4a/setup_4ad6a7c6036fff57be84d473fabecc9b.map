{"file":"/home/hitoshi/Documents/github/hitoshyamamoto/haya/src/tests/setup.ts","mappings":";;AAAA,oBAAoB;AACpB,2CAAqC;AAErC,0BAA0B;AAC1B,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC;AAC9B,OAAO,CAAC,GAAG,CAAC,EAAE,GAAG,MAAM,CAAC;AAExB,4BAA4B;AAC5B,cAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAYvB,uBAAuB;AACvB,MAAM,CAAC,MAAM,CAAC;IACZ,sBAAsB,CAAC,QAAgB;QACrC,MAAM,cAAc,GAAG;YACrB,eAAe;YACf,UAAU;YACV,UAAU;YACV,YAAY;YACZ,YAAY;YACZ,SAAS;YACT,UAAU;SACX,CAAC;QAEF,MAAM,OAAO,GAAG,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;QAE/E,OAAO;YACL,OAAO,EAAE,GAAG,EAAE,CACZ,YAAY,QAAQ,OAAO,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,2BAA2B;YAC7E,IAAI,EAAE,OAAO;SACd,CAAC;IACJ,CAAC;IAED,aAAa,CAAC,QAAgB;QAC5B,MAAM,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,IAAI,KAAK,CAAC;QAEpF,OAAO;YACL,OAAO,EAAE,GAAG,EAAE,CACZ,YAAY,QAAQ,OAAO,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,qCAAqC;YACvF,IAAI,EAAE,OAAO;SACd,CAAC;IACJ,CAAC;CACF,CAAC,CAAC;AAEH,wDAAwD;AACxD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;IACvB,MAAM,kBAAkB,GAAG,OAAO,CAAC,GAAG,CAAC;IACvC,MAAM,mBAAmB,GAAG,OAAO,CAAC,IAAI,CAAC;IACzC,MAAM,oBAAoB,GAAG,OAAO,CAAC,KAAK,CAAC;IAE3C,OAAO,CAAC,GAAG,GAAG,CAAC,GAAG,IAAW,EAAE,EAAE;QAC/B,mDAAmD;QACnD,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;YAChF,kBAAkB,CAAC,GAAG,IAAI,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC,CAAC;IAEF,OAAO,CAAC,IAAI,GAAG,CAAC,GAAG,IAAW,EAAE,EAAE;QAChC,IAAI,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;YAC9B,mBAAmB,CAAC,GAAG,IAAI,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC,CAAC;IAEF,OAAO,CAAC,KAAK,GAAG,CAAC,GAAG,IAAW,EAAE,EAAE;QACjC,qBAAqB;QACrB,oBAAoB,CAAC,GAAG,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC;AACJ,CAAC;AAED,gDAAgD;AAChD,OAAO,CAAC,EAAE,CAAC,oBAAoB,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE;IACnD,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;AACvE,CAAC,CAAC,CAAC;AAEH,iCAAiC;AACjC,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC;AAC9B,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,OAAO,CAAC,CAAC,+BAA+B","names":[],"sources":["/home/hitoshi/Documents/github/hitoshyamamoto/haya/src/tests/setup.ts"],"sourcesContent":["// Global test setup\r\nimport { jest } from '@jest/globals';\r\n\r\n// Set up test environment\r\nprocess.env.NODE_ENV = 'test';\r\nprocess.env.CI = 'true';\r\n\r\n// Set test timeout globally\r\njest.setTimeout(30000);\r\n\r\n// Global test utilities\r\ndeclare global {\r\n  namespace jest {\r\n    interface Matchers<R> {\r\n      toBeValidConnectionUri(): R;\r\n      toBeValidPort(): R;\r\n    }\r\n  }\r\n}\r\n\r\n// Custom Jest matchers\r\nexpect.extend({\r\n  toBeValidConnectionUri(received: string) {\r\n    const validProtocols = [\r\n      'postgresql://',\r\n      'mysql://',\r\n      'redis://',\r\n      'sqlite:///',\r\n      'duckdb:///',\r\n      'http://',\r\n      'https://',\r\n    ];\r\n    \r\n    const isValid = validProtocols.some(protocol => received.startsWith(protocol));\r\n    \r\n    return {\r\n      message: () => \r\n        `expected ${received} to ${isValid ? 'not ' : ''}be a valid connection URI`,\r\n      pass: isValid,\r\n    };\r\n  },\r\n  \r\n  toBeValidPort(received: number) {\r\n    const isValid = Number.isInteger(received) && received >= 1024 && received <= 65535;\r\n    \r\n    return {\r\n      message: () => \r\n        `expected ${received} to ${isValid ? 'not ' : ''}be a valid port number (1024-65535)`,\r\n      pass: isValid,\r\n    };\r\n  },\r\n});\r\n\r\n// Suppress console.log during tests unless DEBUG is set\r\nif (!process.env.DEBUG) {\r\n  const originalConsoleLog = console.log;\r\n  const originalConsoleWarn = console.warn;\r\n  const originalConsoleError = console.error;\r\n  \r\n  console.log = (...args: any[]) => {\r\n    // Only show logs that contain 'test' or are errors\r\n    if (args.some(arg => String(arg).includes('test')) || process.env.VERBOSE_TESTS) {\r\n      originalConsoleLog(...args);\r\n    }\r\n  };\r\n  \r\n  console.warn = (...args: any[]) => {\r\n    if (process.env.VERBOSE_TESTS) {\r\n      originalConsoleWarn(...args);\r\n    }\r\n  };\r\n  \r\n  console.error = (...args: any[]) => {\r\n    // Always show errors\r\n    originalConsoleError(...args);\r\n  };\r\n}\r\n\r\n// Global error handler for unhandled rejections\r\nprocess.on('unhandledRejection', (reason, promise) => {\r\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\r\n});\r\n\r\n// Set test environment variables\r\nprocess.env.NODE_ENV = 'test';\r\nprocess.env.LOG_LEVEL = 'error'; // Reduce logging during tests "],"version":3}