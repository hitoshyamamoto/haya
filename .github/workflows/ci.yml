name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        test-type: [unit, integration, cli, database-specific]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run type check
      run: npm run build
    
    - name: Setup Docker (required for database tests)
      if: matrix.test-type == 'integration' || matrix.test-type == 'cli' || matrix.test-type == 'database-specific'
      run: |
        docker --version
        docker-compose --version
    
    - name: Run Unit Tests
      if: matrix.test-type == 'unit'
      run: npm test -- --testPathPattern="src/tests/unit" --verbose
    
    - name: Run Integration Tests
      if: matrix.test-type == 'integration'
      run: npm test -- --testPathPattern="src/tests/integration" --verbose --testTimeout=180000
      env:
        NODE_ENV: test
    
    - name: Run CLI Tests
      if: matrix.test-type == 'cli'
      run: npm test -- --testPathPattern="src/tests/cli" --verbose --testTimeout=120000
      env:
        NODE_ENV: test
    
    - name: Run Database-Specific Tests
      if: matrix.test-type == 'database-specific'
      run: npm test -- --testPathPattern="src/tests/database-specific" --verbose --testTimeout=180000
      env:
        NODE_ENV: test
    
    - name: Check for vulnerabilities
      run: npm audit --audit-level=moderate
    
    - name: Test Docker Clean Up
      if: always() && (matrix.test-type == 'integration' || matrix.test-type == 'cli' || matrix.test-type == 'database-specific')
      run: |
        # Clean up any test containers
        docker ps -a --filter "name=test-" -q | xargs -r docker rm -f
        # Clean up any test volumes
        docker volume ls --filter "name=test-" -q | xargs -r docker volume rm
        # Clean up any test networks
        docker network ls --filter "name=test-" -q | xargs -r docker network rm

  # Quick test job for basic functionality
  quick-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run type check
      run: npm run build
    
    - name: Run unit tests only
      run: npm test -- --testPathPattern="src/tests/unit" --verbose
    
    - name: Test CLI help command
      run: node dist/cli/index.js --help
    
    - name: Test CLI version command
      run: node dist/cli/index.js --version

  # Security and quality checks
  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Check for outdated dependencies
      run: npm outdated || true
    
    - name: Run linter
      run: npm run lint
    
    - name: Check TypeScript types
      run: npm run build

  # Test on multiple operating systems
  cross-platform:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run type check
      run: npm run build
    
    - name: Test CLI basic functionality
      run: node dist/cli/index.js --help
    
    - name: Run unit tests
      run: npm test -- --testPathPattern="src/tests/unit" --verbose

  # Database compatibility test (Linux only, requires Docker)
  database-compatibility:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        database: [postgresql, mariadb, redis, qdrant, meilisearch]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Test ${{ matrix.database }} database creation
      run: |
        # Test database creation without starting (quick test)
        timeout 60 node dist/cli/index.js init -n test-${{ matrix.database }}-${GITHUB_RUN_ID} -e ${{ matrix.database }} -y --no-admin-dashboard
        # Clean up
        node dist/cli/index.js remove test-${{ matrix.database }}-${GITHUB_RUN_ID} --force || true
      env:
        NODE_ENV: test 